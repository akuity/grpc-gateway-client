// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: testv1/test.proto

package testv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_ListInvitations_FullMethodName     = "/io.akuity.test.v1.TestService/ListInvitations"
	TestService_SendInvitation_FullMethodName      = "/io.akuity.test.v1.TestService/SendInvitation"
	TestService_TrackInvitation_FullMethodName     = "/io.akuity.test.v1.TestService/TrackInvitation"
	TestService_DownloadInvitations_FullMethodName = "/io.akuity.test.v1.TestService/DownloadInvitations"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*SendInvitationResponse, error)
	TrackInvitation(ctx context.Context, in *TrackInvitationRequest, opts ...grpc.CallOption) (TestService_TrackInvitationClient, error)
	DownloadInvitations(ctx context.Context, in *DownloadInvitationsRequest, opts ...grpc.CallOption) (TestService_DownloadInvitationsClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, TestService_ListInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*SendInvitationResponse, error) {
	out := new(SendInvitationResponse)
	err := c.cc.Invoke(ctx, TestService_SendInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TrackInvitation(ctx context.Context, in *TrackInvitationRequest, opts ...grpc.CallOption) (TestService_TrackInvitationClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_TrackInvitation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTrackInvitationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TrackInvitationClient interface {
	Recv() (*TrackInvitationResponse, error)
	grpc.ClientStream
}

type testServiceTrackInvitationClient struct {
	grpc.ClientStream
}

func (x *testServiceTrackInvitationClient) Recv() (*TrackInvitationResponse, error) {
	m := new(TrackInvitationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) DownloadInvitations(ctx context.Context, in *DownloadInvitationsRequest, opts ...grpc.CallOption) (TestService_DownloadInvitationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_DownloadInvitations_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceDownloadInvitationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_DownloadInvitationsClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type testServiceDownloadInvitationsClient struct {
	grpc.ClientStream
}

func (x *testServiceDownloadInvitationsClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	SendInvitation(context.Context, *SendInvitationRequest) (*SendInvitationResponse, error)
	TrackInvitation(*TrackInvitationRequest, TestService_TrackInvitationServer) error
	DownloadInvitations(*DownloadInvitationsRequest, TestService_DownloadInvitationsServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedTestServiceServer) SendInvitation(context.Context, *SendInvitationRequest) (*SendInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedTestServiceServer) TrackInvitation(*TrackInvitationRequest, TestService_TrackInvitationServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackInvitation not implemented")
}
func (UnimplementedTestServiceServer) DownloadInvitations(*DownloadInvitationsRequest, TestService_DownloadInvitationsServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadInvitations not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TrackInvitation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackInvitationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TrackInvitation(m, &testServiceTrackInvitationServer{stream})
}

type TestService_TrackInvitationServer interface {
	Send(*TrackInvitationResponse) error
	grpc.ServerStream
}

type testServiceTrackInvitationServer struct {
	grpc.ServerStream
}

func (x *testServiceTrackInvitationServer) Send(m *TrackInvitationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_DownloadInvitations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadInvitationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).DownloadInvitations(m, &testServiceDownloadInvitationsServer{stream})
}

type TestService_DownloadInvitationsServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type testServiceDownloadInvitationsServer struct {
	grpc.ServerStream
}

func (x *testServiceDownloadInvitationsServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.akuity.test.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInvitations",
			Handler:    _TestService_ListInvitations_Handler,
		},
		{
			MethodName: "SendInvitation",
			Handler:    _TestService_SendInvitation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackInvitation",
			Handler:       _TestService_TrackInvitation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadInvitations",
			Handler:       _TestService_DownloadInvitations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testv1/test.proto",
}
